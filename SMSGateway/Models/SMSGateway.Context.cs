//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMSGateway.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.SqlClient;

    public partial class SMSGateway_DevEntities : DbContext
    {
        public SMSGateway_DevEntities()
            : base("name=SMSGateway_DevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessLogs> AccessLogs { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<IncomingSMS> IncomingSMS { get; set; }
        public virtual DbSet<OutgoingSMSHist> OutgoingSMSHist { get; set; }
        public virtual DbSet<Refills> Refills { get; set; }
        public virtual DbSet<Saf> Saf { get; set; }
        public virtual DbSet<SMSPurchases> SMSPurchases { get; set; }
        public virtual DbSet<StatusCodes> StatusCodes { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<AlertLogs> AlertLogs { get; set; }
        public virtual DbSet<ErrorLog> ErrorLog { get; set; }
        public virtual DbSet<OutgoingSMS> OutgoingSMS { get; set; }
        public virtual DbSet<PeriodicOpLog> PeriodicOpLog { get; set; }

        //internal object spSMSPurchaseReport(DateTime? fromDate, DateTime? toDate, int supplier, SqlParameter totalQuantity, SqlParameter totalAmount)
        //{
        //    throw new NotImplementedException();
        //}

        public virtual DbSet<SparrowLog> SparrowLog { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<vwClients> vwClients { get; set; }
        public virtual DbSet<vwClientStatics> vwClientStatics { get; set; }
        public virtual DbSet<vwExpectedBalance> vwExpectedBalance { get; set; }
    
        public virtual int spBalanceAlert(string clientCode, Nullable<decimal> balance, string emailId, string mobileNo)
        {
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBalanceAlert", clientCodeParameter, balanceParameter, emailIdParameter, mobileNoParameter);
        }
    
        public virtual ObjectResult<spDashBoardView1_Result> spDashBoardView1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDashBoardView1_Result>("spDashBoardView1");
        }
    
        public virtual int spNotifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotifications");
        }
    
        public virtual ObjectResult<spRefillReport_Result> spRefillReport(string clientCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNo, ObjectParameter pageCount)
        {
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRefillReport_Result>("spRefillReport", clientCodeParameter, fromDateParameter, toDateParameter, pageNoParameter, pageCount);
        }
    
        public virtual int spReportOutgoingSMS(string status, string clientCode, string recipients, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNo, ObjectParameter pageCount, ObjectParameter sMSCount, ObjectParameter sMSCost)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            var recipientsParameter = recipients != null ?
                new ObjectParameter("Recipients", recipients) :
                new ObjectParameter("Recipients", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReportOutgoingSMS", statusParameter, clientCodeParameter, recipientsParameter, fromDateParameter, toDateParameter, pageNoParameter, pageCount, sMSCount, sMSCost);
        }
    
        public virtual ObjectResult<spReportSMSStmt_Result> spReportSMSStmt(string clientCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportSMSStmt_Result>("spReportSMSStmt", clientCodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int spSendEmail(string subject, string body, string to, string toCC, string attachmentPath)
        {
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var toCCParameter = toCC != null ?
                new ObjectParameter("ToCC", toCC) :
                new ObjectParameter("ToCC", typeof(string));
    
            var attachmentPathParameter = attachmentPath != null ?
                new ObjectParameter("AttachmentPath", attachmentPath) :
                new ObjectParameter("AttachmentPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSendEmail", subjectParameter, bodyParameter, toParameter, toCCParameter, attachmentPathParameter);
        }
    
        public virtual int spSendSMS(string clientCode, string passKey, string recipients, string msgText, string requestCode, string requestIp, string regId)
        {
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            var passKeyParameter = passKey != null ?
                new ObjectParameter("PassKey", passKey) :
                new ObjectParameter("PassKey", typeof(string));
    
            var recipientsParameter = recipients != null ?
                new ObjectParameter("Recipients", recipients) :
                new ObjectParameter("Recipients", typeof(string));
    
            var msgTextParameter = msgText != null ?
                new ObjectParameter("MsgText", msgText) :
                new ObjectParameter("MsgText", typeof(string));
    
            var requestCodeParameter = requestCode != null ?
                new ObjectParameter("RequestCode", requestCode) :
                new ObjectParameter("RequestCode", typeof(string));
    
            var requestIpParameter = requestIp != null ?
                new ObjectParameter("RequestIp", requestIp) :
                new ObjectParameter("RequestIp", typeof(string));
    
            var regIdParameter = regId != null ?
                new ObjectParameter("RegId", regId) :
                new ObjectParameter("RegId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSendSMS", clientCodeParameter, passKeyParameter, recipientsParameter, msgTextParameter, requestCodeParameter, requestIpParameter, regIdParameter);
        }
    
        public virtual int spSGBUildBalance(string clientCode)
        {
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSGBUildBalance", clientCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSGPeriodicOp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSGPeriodicOp");
        }
    
        public virtual ObjectResult<Nullable<int>> spSMSGateway_EOD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSMSGateway_EOD");
        }
    
        public virtual int spSMSTimelyAlert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSMSTimelyAlert");
        }
    
        public virtual int spUpdateSMSStatus(string regId, Nullable<int> statusCode)
        {
            var regIdParameter = regId != null ?
                new ObjectParameter("RegId", regId) :
                new ObjectParameter("RegId", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSMSStatus", regIdParameter, statusCodeParameter);
        }
    
        public virtual int spSMSClientConsumptionAll(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string clientCode, string clientType, ObjectParameter totalOpeningBalanceCredit, ObjectParameter totalOpeningBalanceAmt, ObjectParameter totalPurchaseCredit, ObjectParameter totalPurchaseAmt, ObjectParameter totalConsumedCredit, ObjectParameter totalConsumedAmt, ObjectParameter totalClosingBalanceCredit, ObjectParameter totalClosingBalanceAmt)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("ClientCode", clientCode) :
                new ObjectParameter("ClientCode", typeof(string));
    
            var clientTypeParameter = clientType != null ?
                new ObjectParameter("ClientType", clientType) :
                new ObjectParameter("ClientType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSMSClientConsumptionAll", fromDateParameter, toDateParameter, clientCodeParameter, clientTypeParameter, totalOpeningBalanceCredit, totalOpeningBalanceAmt, totalPurchaseCredit, totalPurchaseAmt, totalConsumedCredit, totalConsumedAmt, totalClosingBalanceCredit, totalClosingBalanceAmt);
        }
    
        public virtual int spSMSPurchaseReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> supplierId, ObjectParameter totalQuantity, ObjectParameter totalAmount)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSMSPurchaseReport", fromDateParameter, toDateParameter, supplierIdParameter, totalQuantity, totalAmount);
        }
    
        public virtual int spRevenueReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRevenueReport", fromDateParameter, toDateParameter);
        }
    }
}
